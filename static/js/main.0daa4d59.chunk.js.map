{"version":3,"sources":["ui/DrawBox/DrawBox.js","ui/myCard/MyCard.js","components/Results/Results.js","api/face.js","App.js","index.js"],"names":["DrawBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getDescription","asyncToGenerator","regenerator_default","a","mark","_callee","fullDesc","faceMatcher","match","_args","arguments","wrap","_context","prev","next","length","undefined","setState","descriptors","map","fd","descriptor","detections","detection","state","findBestMatch","sent","stop","newProps","_this$props","imageWidth","boxColor","box","i","relativeBox","dimension","_imageDims","_X","_x","_Y","_y","_height","_width","_W","width","_H","height","react_default","createElement","key","style","position","border","borderColor","top","left","transform","concat","color","fontWeight","Component","MyCard","showButtons","CardActions_default","float","Button_default","size","onClick","delete","drawBox","id","title","padding","Card_default","display","type","accept","onChange","upload","CardActionArea_default","htmlFor","CardMedia_default","component","src","photo","cursor","ui_DrawBox_DrawBox","CardContent_default","loading","LinearProgress_default","Typography_default","gutterBottom","variant","complete","withStyles","card","maxWidth","media","Results","marginTop","result","results","resultCheck","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","value","err","return","checkCoinside","res","faceOne","faceTwo","Math","abs","loadModels","_loadModels","apply","MODEL_URL","process","faceapi","getFullFaceDescription","_getFullFaceDescription","_callee2","blob","inputSize","OPTION","useTinyModel","img","_args2","_context2","scoreThreshold","withFaceLandmarks","withFaceDescriptors","abrupt","INIT_STATE","imageURL","WIDTH","HEIGHT","MaxWidth","App","cards","objectSpread","componentWillMount","document","documentElement","clientWidth","toConsumableArray","isModelLoaded","tinyFaceDetector","params","handleImage","image","intCard","then","handleFileChange","_callee4","event","countCard","that","_context4","assertThisInitialized","target","files","URL","createObjectURL","onload","_callee3","_context3","imageDimension","e","console","log","handleDeleteFile","showCards","myCard_MyCard","assign","isShowResult","completedCards","getResultSimilary","cardOne","cardTwo","resultSimilary","cardOneDescriptor","cardTwoDescriptor","elementOne","j","elementTwo","push","getSimilary","Fragment","className","components_Results_Results","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.0daa4d59.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass DrawBox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            descriptors: null,\n            detections: null,\n            match: null,\n        };\n    }\n\n    componentDidMount() {\n        this.getDescription();\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.getDescription(newProps);\n    }\n\n    getDescription = async (props = this.props) => {\n        const { fullDesc, faceMatcher } = props;\n        if (!!fullDesc) {\n            await this.setState({\n                descriptors: fullDesc.map(fd => fd.descriptor),\n                detections: fullDesc.map(fd => fd.detection),\n            });\n            if (!!this.state.descriptors && !!faceMatcher) {\n                let match = await this.state.descriptors.map(descriptor =>\n                    faceMatcher.findBestMatch(descriptor)\n                );\n                this.setState({ match });\n            }\n        }\n    };\n\n    render() {\n        const { imageWidth, boxColor } = this.props;\n        const { detections } = this.state;\n        let box = null;\n\n        if (!!detections) {\n            box = detections.map((detection, i) => {\n                const relativeBox = detection.relativeBox;\n                const dimension = detection._imageDims;\n                let _X = imageWidth * relativeBox._x;\n                let _Y =\n                    (relativeBox._y * imageWidth * dimension._height) /\n                    dimension._width;\n                let _W = imageWidth * relativeBox.width;\n                let _H =\n                    (relativeBox.height * imageWidth * dimension._height) /\n                    dimension._width;\n                return (\n                    <div key={i}>\n                        <div\n                            style={{\n                                position: 'absolute',\n                                border: 'solid',\n                                borderColor: boxColor,\n                                height: _H,\n                                width: _W,\n                                top: 0,\n                                left: 0,\n                                transform: `translate(${_X}px,${_Y}px)`,\n                            }}>\n                            <div\n                                style={{\n                                    color: '#fff',\n                                    fontWeight: 'bold',\n                                    transform: `translate(0px,-18px)`,\n                                }}>\n                                ЛИЦО {i + 1}\n                            </div>\n                        </div>\n                    </div>\n                );\n            });\n        }\n\n        return <div>{box}</div>;\n    }\n}\n\nexport default DrawBox;\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport DrawBox from '../DrawBox/DrawBox';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst styles = {\n    card: {\n        maxWidth: '600px',\n    },\n    media: {\n        height: 250,\n    },\n};\n\nclass MyCard extends Component {\n    showButtons = () => {\n        return (\n            <CardActions style={{ float: 'right' }}>\n                <Button\n                    size='small'\n                    color='primary'\n                    onClick={this.props.delete}>\n                    Удалить\n                </Button>\n            </CardActions>\n        );\n    };\n\n    render() {\n        const { detections, width } = this.props;\n        let drawBox = null;\n        if (!!detections) {\n            drawBox = detections.map((detection, i) => {\n                const relativeBox = detection.relativeBox;\n                const dimension = detection._imageDims;\n                let _X = width * relativeBox._x;\n                let _Y =\n                    (relativeBox._y * width * dimension._height) /\n                    dimension._width;\n                let _W = width * relativeBox.width;\n                let _H =\n                    (relativeBox.height * width * dimension._height) /\n                    dimension._width;\n                return (\n                    <div key={i}>\n                        <div\n                            style={{\n                                position: 'absolute',\n                                border: 'solid',\n                                borderColor: 'blue',\n                                height: _H,\n                                width: _W,\n                                top: 0,\n                                left: 0,\n                                transform: `translate(${_X}px,${_Y}px)`,\n                            }}\n                        />\n                    </div>\n                );\n            });\n        }\n\n        const id = 'myFileUpload' + this.props.title;\n        return (\n            <div\n                style={{\n                    padding: '8px',\n                }}>\n                <Card\n                    style={{\n                        width: this.props.width,\n                        height: 'auto',\n                    }}>\n                    <input\n                        style={{ display: 'none' }}\n                        id={id}\n                        type='file'\n                        accept='image/*'\n                        onChange={this.props.upload}\n                    />\n                    <CardActionArea>\n                        <label htmlFor={id}>\n                            <CardMedia\n                                component='img'\n                                src={\n                                    this.props.photo\n                                        ? this.props.photo\n                                        : './static/images/upload3.png'\n                                }\n                                style={{\n                                    cursor: 'pointer',\n                                }}\n                            />\n                            {!!this.props.fullDesc ? (\n                                <DrawBox\n                                    fullDesc={this.props.fullDesc}\n                                    imageWidth={this.props.width}\n                                    boxColor={this.props.boxColor}\n                                />\n                            ) : null}\n                            {!!this.props.fullDesc ? drawBox : null}\n                            <CardContent>\n                                {this.props.loading ? (\n                                    <LinearProgress />\n                                ) : (\n                                    <Typography\n                                        gutterBottom\n                                        variant='h5'\n                                        component='h2'>\n                                        {this.props.complete ? (\n                                            this.props.detections <= 0 ? (\n                                                <span>Лиц не обнаружено</span>\n                                            ) : (\n                                                <span>\n                                                    Обнаружено лиц -{' '}\n                                                    {\n                                                        this.props.detections\n                                                            .length\n                                                    }\n                                                </span>\n                                            )\n                                        ) : null}\n                                    </Typography>\n                                )}\n                                <Typography component='p'>\n                                    {this.props.loading ? (\n                                        <span>Определяю лица...</span>\n                                    ) : !this.props.complete ? (\n                                        <span>\n                                            Пожалуйста, загрузите свою\n                                            фотографию, на которой хорошо видно\n                                            лицо\n                                        </span>\n                                    ) : null}\n                                </Typography>\n                            </CardContent>\n                        </label>\n                    </CardActionArea>\n                    {this.props.photo ? this.showButtons() : null}\n                </Card>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(MyCard);\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst checkCoinside = results => {\n    let resultCheck = false;\n    if (!!results) {\n        for (let res of results) {\n            if (res.result <= 0.6) {\n                resultCheck = true;\n            }\n        }\n    }\n    return resultCheck;\n};\n\nconst showCoinside = results =>\n    !!results\n        ? results.map((res, i) => (\n              <Typography component='p' key={i}>\n                  <span>\n                      <strong>Лицо {res.faceOne + 1}</strong> [left] и{' '}\n                      <strong>Лицо {res.faceTwo + 1}</strong> [right] -{' '}\n                      {res.result <= 0.6 ? 'похожи' : 'не похожи'} (\n                      {Math.abs(res.result * 100 - 100)}%)\n                  </span>\n              </Typography>\n          ))\n        : null;\n\nconst Results = props => {\n    return (\n        <div>\n            <Card style={{ maxWidth: '700px', marginTop: '15px' }}>\n                <CardActionArea>\n                    <CardContent>\n                        <Typography\n                            gutterBottom\n                            variant='h5'\n                            component='h2'\n                            style={{\n                                color: props.result ? 'green' : 'red',\n                            }}>\n                            {checkCoinside(props.result)\n                                ? 'Есть совпадения'\n                                : 'Нет совпадений'}\n                        </Typography>\n                        {showCoinside(props.result)}\n                    </CardContent>\n                </CardActionArea>\n            </Card>\n        </div>\n    );\n};\n\nexport default Results;\n","import * as faceapi from 'face-api.js';\n\nconst maxDescriptorDistance = 0.5;\n\nexport async function loadModels() {\n    const MODEL_URL = process.env.PUBLIC_URL + '/models';\n    await faceapi.loadTinyFaceDetectorModel(MODEL_URL);\n    await faceapi.loadFaceLandmarkTinyModel(MODEL_URL);\n    await faceapi.loadFaceRecognitionModel(MODEL_URL);\n}\n\nexport function getSimilary(cardOne, cardTwo) {\n    let resultSimilary = [];\n    const cardOneDescriptor = cardOne.fullDesc;\n    const cardTwoDescriptor = cardTwo.fullDesc;\n\n    for (let i = 0; i < cardOneDescriptor.length; i++) {\n        const elementOne = cardOneDescriptor[i].descriptor;\n        for (let j = 0; j < cardTwoDescriptor.length; j++) {\n            const elementTwo = cardTwoDescriptor[j].descriptor;\n            resultSimilary.push({\n                faceOne: i,\n                faceTwo: j,\n                result: faceapi.round(\n                    faceapi.euclideanDistance(elementOne, elementTwo)\n                ),\n            });\n        }\n    }\n    return resultSimilary;\n}\n\nexport async function getFullFaceDescription(blob, inputSize = 512) {\n    // tiny_face_detector options\n    let scoreThreshold = 0.5;\n    const OPTION = new faceapi.TinyFaceDetectorOptions({\n        inputSize,\n        scoreThreshold,\n    });\n    const useTinyModel = true;\n\n    // fetch image to api\n    let img = await faceapi.fetchImage(blob);\n\n    // detect all faces and generate full description from image\n    // including landmark and descriptor of each face\n    let fullDesc = await faceapi\n        .detectAllFaces(img, OPTION)\n        .withFaceLandmarks(useTinyModel)\n        .withFaceDescriptors();\n    return fullDesc;\n}\n\nexport async function createMatcher(faceProfile) {\n    // Create labeled descriptors of member from profile\n    let members = Object.keys(faceProfile);\n    let labeledDescriptors = members.map(\n        member =>\n            new faceapi.LabeledFaceDescriptors(\n                faceProfile[member].name,\n                faceProfile[member].descriptors.map(\n                    descriptor => new Float32Array(descriptor)\n                )\n            )\n    );\n\n    // Create face matcher (maximum descriptor distance is 0.5)\n    let faceMatcher = new faceapi.FaceMatcher(\n        labeledDescriptors,\n        maxDescriptorDistance\n    );\n    return faceMatcher;\n}\n\nexport function isFaceDetectionModelLoaded() {\n    return !!faceapi.nets.tinyFaceDetector.params;\n}\n","import React, { Component } from 'react';\nimport './css/App.css';\nimport MyCard from './ui/myCard/MyCard';\nimport Results from './components/Results/Results';\nimport {\n    loadModels,\n    getFullFaceDescription,\n    isFaceDetectionModelLoaded,\n    getSimilary,\n} from './api/face';\n\n// Initial State\nconst INIT_STATE = {\n    imageURL: '',\n    WIDTH: null,\n    HEIGHT: 0,\n    fullDesc: null,\n    detections: null,\n    descriptors: null,\n    match: null,\n    loading: false,\n    complete: false,\n};\n\nconst MaxWidth = 450;\nconst boxColor = '#BE80B5';\n\nclass App extends Component {\n    state = {\n        cards: [\n            {\n                ...INIT_STATE,\n                title: 'Photo 1',\n            },\n            {\n                ...INIT_STATE,\n                title: 'Photo 2',\n            },\n        ],\n    };\n\n    componentWillMount = async () => {\n        let _W = document.documentElement.clientWidth;\n        if (_W > MaxWidth) _W = MaxWidth;\n        let cards = [...this.state.cards];\n        cards.map((card, i) => {\n            return (cards[i].WIDTH = _W);\n        });\n        this.setState({ cards });\n        await loadModels();\n        await this.setState({\n            isModelLoaded: !!isFaceDetectionModelLoaded(),\n        });\n    };\n\n    handleImage = async (image, intCard) => {\n        let cards = [...this.state.cards];\n        cards[intCard].loading = false;\n        cards[intCard].complete = true;\n        await getFullFaceDescription(image).then(fullDesc => {\n            if (!!fullDesc) {\n                cards[intCard].fullDesc = fullDesc;\n                cards[intCard].detections = fullDesc.map(fd => fd.detection);\n                this.setState({\n                    cards,\n                });\n            }\n        });\n    };\n\n    handleFileChange = async (event, countCard) => {\n        const that = this;\n        try {\n            if (!!event.target.files) {\n                const img = document.createElement('img');\n                const blob = URL.createObjectURL(event.target.files[0]);\n                img.src = blob;\n                img.onload = async function() {\n                    let cards = [...that.state.cards];\n                    let HEIGHT =\n                        (cards[countCard].WIDTH * img.height) / img.width;\n                    cards[countCard].HEIGHT = HEIGHT;\n                    cards[countCard].imageDimension = {\n                        width: img.width,\n                        height: img.height,\n                    };\n                    cards[countCard].imageURL = !!blob ? blob : '';\n                    cards[countCard].loading = true;\n                    cards[countCard].complete = false;\n                    await that.setState({\n                        cards,\n                    });\n                    await that.handleImage(\n                        that.state.cards[countCard].imageURL,\n                        countCard\n                    );\n                };\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    handleDeleteFile = intCard => {\n        let cards = [...this.state.cards];\n        let _W = document.documentElement.clientWidth;\n        if (_W > MaxWidth) _W = MaxWidth;\n        cards[intCard] = {\n            ...INIT_STATE,\n            title: 'Photo ' + (intCard + 1),\n            loading: false,\n        };\n        cards[intCard].WIDTH = _W;\n        this.setState({\n            cards,\n        });\n    };\n\n    showCards = () =>\n        this.state.cards.map((card, i) => (\n            <MyCard\n                key={i}\n                title={card.title}\n                photo={card.imageURL}\n                width={card.WIDTH}\n                upload={e => {\n                    this.handleFileChange(e, i);\n                }}\n                delete={() => {\n                    this.handleDeleteFile(i);\n                }}\n                fullDesc={card.fullDesc}\n                boxColor={boxColor}\n                detections={card.detections}\n                {...card}\n                style={{\n                    display: 'flex',\n                }}\n            />\n        ));\n\n    isShowResult = () => {\n        let completedCards = 0;\n        this.state.cards.map((card, i) => {\n            if (card.complete && card.detections.length > 0) {\n                completedCards++;\n            }\n            return null;\n        });\n        if (completedCards >= this.state.cards.length) {\n            this.getResultSimilary();\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    getResultSimilary = () => {\n        return getSimilary(this.state.cards[0], this.state.cards[1]);\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className='container'>\n                    {this.state.cards ? this.showCards() : null}\n                </div>\n                {this.isShowResult() ? (\n                    <div className='container'>\n                        <Results result={this.getResultSimilary()} />\n                    </div>\n                ) : null}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}